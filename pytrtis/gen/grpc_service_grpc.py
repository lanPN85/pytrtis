# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: grpc_service.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from pytrtis.gen import api_pb2
from pytrtis.gen import request_status_pb2
from pytrtis.gen import server_status_pb2
from pytrtis.gen import grpc_service_pb2


class GRPCServiceBase(abc.ABC):

    @abc.abstractmethod
    async def Status(self, stream: 'grpclib.server.Stream[grpc_service_pb2.StatusRequest, grpc_service_pb2.StatusResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Health(self, stream: 'grpclib.server.Stream[grpc_service_pb2.HealthRequest, grpc_service_pb2.HealthResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Infer(self, stream: 'grpclib.server.Stream[grpc_service_pb2.InferRequest, grpc_service_pb2.InferResponse]') -> None:
        pass

    @abc.abstractmethod
    async def StreamInfer(self, stream: 'grpclib.server.Stream[grpc_service_pb2.InferRequest, grpc_service_pb2.InferResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ModelControl(self, stream: 'grpclib.server.Stream[grpc_service_pb2.ModelControlRequest, grpc_service_pb2.ModelControlResponse]') -> None:
        pass

    @abc.abstractmethod
    async def SharedMemoryControl(self, stream: 'grpclib.server.Stream[grpc_service_pb2.SharedMemoryControlRequest, grpc_service_pb2.SharedMemoryControlResponse]') -> None:
        pass

    @abc.abstractmethod
    async def Repository(self, stream: 'grpclib.server.Stream[grpc_service_pb2.RepositoryRequest, grpc_service_pb2.RepositoryResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/nvidia.inferenceserver.GRPCService/Status': grpclib.const.Handler(
                self.Status,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_service_pb2.StatusRequest,
                grpc_service_pb2.StatusResponse,
            ),
            '/nvidia.inferenceserver.GRPCService/Health': grpclib.const.Handler(
                self.Health,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_service_pb2.HealthRequest,
                grpc_service_pb2.HealthResponse,
            ),
            '/nvidia.inferenceserver.GRPCService/Infer': grpclib.const.Handler(
                self.Infer,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_service_pb2.InferRequest,
                grpc_service_pb2.InferResponse,
            ),
            '/nvidia.inferenceserver.GRPCService/StreamInfer': grpclib.const.Handler(
                self.StreamInfer,
                grpclib.const.Cardinality.STREAM_STREAM,
                grpc_service_pb2.InferRequest,
                grpc_service_pb2.InferResponse,
            ),
            '/nvidia.inferenceserver.GRPCService/ModelControl': grpclib.const.Handler(
                self.ModelControl,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_service_pb2.ModelControlRequest,
                grpc_service_pb2.ModelControlResponse,
            ),
            '/nvidia.inferenceserver.GRPCService/SharedMemoryControl': grpclib.const.Handler(
                self.SharedMemoryControl,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_service_pb2.SharedMemoryControlRequest,
                grpc_service_pb2.SharedMemoryControlResponse,
            ),
            '/nvidia.inferenceserver.GRPCService/Repository': grpclib.const.Handler(
                self.Repository,
                grpclib.const.Cardinality.UNARY_UNARY,
                grpc_service_pb2.RepositoryRequest,
                grpc_service_pb2.RepositoryResponse,
            ),
        }


class GRPCServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Status = grpclib.client.UnaryUnaryMethod(
            channel,
            '/nvidia.inferenceserver.GRPCService/Status',
            grpc_service_pb2.StatusRequest,
            grpc_service_pb2.StatusResponse,
        )
        self.Health = grpclib.client.UnaryUnaryMethod(
            channel,
            '/nvidia.inferenceserver.GRPCService/Health',
            grpc_service_pb2.HealthRequest,
            grpc_service_pb2.HealthResponse,
        )
        self.Infer = grpclib.client.UnaryUnaryMethod(
            channel,
            '/nvidia.inferenceserver.GRPCService/Infer',
            grpc_service_pb2.InferRequest,
            grpc_service_pb2.InferResponse,
        )
        self.StreamInfer = grpclib.client.StreamStreamMethod(
            channel,
            '/nvidia.inferenceserver.GRPCService/StreamInfer',
            grpc_service_pb2.InferRequest,
            grpc_service_pb2.InferResponse,
        )
        self.ModelControl = grpclib.client.UnaryUnaryMethod(
            channel,
            '/nvidia.inferenceserver.GRPCService/ModelControl',
            grpc_service_pb2.ModelControlRequest,
            grpc_service_pb2.ModelControlResponse,
        )
        self.SharedMemoryControl = grpclib.client.UnaryUnaryMethod(
            channel,
            '/nvidia.inferenceserver.GRPCService/SharedMemoryControl',
            grpc_service_pb2.SharedMemoryControlRequest,
            grpc_service_pb2.SharedMemoryControlResponse,
        )
        self.Repository = grpclib.client.UnaryUnaryMethod(
            channel,
            '/nvidia.inferenceserver.GRPCService/Repository',
            grpc_service_pb2.RepositoryRequest,
            grpc_service_pb2.RepositoryResponse,
        )
